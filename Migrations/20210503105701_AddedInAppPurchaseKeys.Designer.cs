// <auto-generated />
using System;
using ExtremeInsiders.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ExtremeInsiders.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210503105701_AddedInAppPurchaseKeys")]
    partial class AddedInAppPurchaseKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ExtremeInsiders.Entities.BannerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("BannerEntities");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.BannerEntityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("ImageId");

                    b.HasIndex("CultureId", "BaseEntityId")
                        .IsUnique();

                    b.ToTable("BannerEntitiesTranslations");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.ConfirmationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateValidUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmationCodes");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Culture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cultures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "ru"
                        },
                        new
                        {
                            Id = 2,
                            Key = "en"
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "RUB"
                        },
                        new
                        {
                            Id = 2,
                            Key = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            Key = "USD"
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId", "EntityId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.MovieTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("ImageId");

                    b.HasIndex("CultureId", "BaseEntityId")
                        .IsUnique();

                    b.ToTable("MoviesTranslations");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.PlaylistTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("ImageId");

                    b.HasIndex("CultureId", "BaseEntityId")
                        .IsUnique();

                    b.ToTable("PlaylistsTranslations");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int?>("EntitySaleableId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInfinite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<int?>("SubscriptionPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntitySaleableId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.PromoCodeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PromoCodeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PromoCodeId", "UserId")
                        .IsUnique();

                    b.ToTable("PromoCodesUsers");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user"
                        },
                        new
                        {
                            Id = 2,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserId", "EntityId")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SocialAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialAccounts");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SocialAccountProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SocialAccountsProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "google"
                        },
                        new
                        {
                            Id = 2,
                            Name = "vk"
                        },
                        new
                        {
                            Id = 3,
                            Name = "facebook"
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SportTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("ImageId");

                    b.HasIndex("CultureId", "BaseEntityId")
                        .IsUnique();

                    b.ToTable("SportsTranslations");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlanId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AppleInAppPurchaseKey")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("GoogleInAppPurchaseKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionsPlans");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SubscriptionPlanPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("numeric");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EntityId");

                    b.ToTable("SubscriptionsPlansPrices");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SubscriptionPlanTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("CultureId");

                    b.ToTable("SubscriptionsPlansTranslations");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AvatarId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateBirthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateSignUp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CultureId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.VideoTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("CultureId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("ImageId");

                    b.HasIndex("CultureId", "BaseEntityId")
                        .IsUnique();

                    b.ToTable("VideosTranslations");
                });

            modelBuilder.Entity("ExtremeInsiders.Models.EntityBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EntitiesBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EntityBase");
                });

            modelBuilder.Entity("ExtremeInsiders.Models.EntitySaleablePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("CurrencyId", "EntityId")
                        .IsUnique();

                    b.ToTable("EntitySaleablePrices");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Sport", b =>
                {
                    b.HasBaseType("ExtremeInsiders.Models.EntityBase");

                    b.HasDiscriminator().HasValue("Sport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 3, 10, 57, 0, 960, DateTimeKind.Utc).AddTicks(3905)
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Models.EntitySaleable", b =>
                {
                    b.HasBaseType("ExtremeInsiders.Models.EntityBase");

                    b.HasDiscriminator().HasValue("EntitySaleable");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Playlist", b =>
                {
                    b.HasBaseType("ExtremeInsiders.Models.EntitySaleable");

                    b.Property<int>("SportId")
                        .HasColumnName("Playlist_SportId")
                        .HasColumnType("integer");

                    b.HasIndex("SportId");

                    b.HasDiscriminator().HasValue("Playlist");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 5, 3, 10, 57, 0, 960, DateTimeKind.Utc).AddTicks(4458),
                            SportId = 1
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Models.EntityLikeable", b =>
                {
                    b.HasBaseType("ExtremeInsiders.Models.EntitySaleable");

                    b.HasDiscriminator().HasValue("EntityLikeable");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Movie", b =>
                {
                    b.HasBaseType("ExtremeInsiders.Models.EntityLikeable");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.HasIndex("SportId");

                    b.HasDiscriminator().HasValue("Movie");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 5, 3, 10, 57, 0, 960, DateTimeKind.Utc).AddTicks(5200),
                            SportId = 1
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Video", b =>
                {
                    b.HasBaseType("ExtremeInsiders.Models.EntityLikeable");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.HasIndex("PlaylistId");

                    b.HasDiscriminator().HasValue("Video");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 5, 3, 10, 57, 0, 960, DateTimeKind.Utc).AddTicks(4954),
                            PlaylistId = 2
                        });
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.BannerEntity", b =>
                {
                    b.HasOne("ExtremeInsiders.Models.EntityBase", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.BannerEntityTranslation", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.BannerEntity", "BaseEntity")
                        .WithMany("Translations")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.ConfirmationCode", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("ConfirmationCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Favorite", b =>
                {
                    b.HasOne("ExtremeInsiders.Models.EntityBase", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Like", b =>
                {
                    b.HasOne("ExtremeInsiders.Models.EntityLikeable", "Entity")
                        .WithMany("Likes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.MovieTranslation", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Movie", "BaseEntity")
                        .WithMany("Translations")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Payment", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.PlaylistTranslation", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Playlist", "BaseEntity")
                        .WithMany("Translations")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.PromoCode", b =>
                {
                    b.HasOne("ExtremeInsiders.Models.EntitySaleable", "EntitySaleable")
                        .WithMany()
                        .HasForeignKey("EntitySaleableId");

                    b.HasOne("ExtremeInsiders.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.PromoCodeUser", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("PromoCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Sale", b =>
                {
                    b.HasOne("ExtremeInsiders.Models.EntitySaleable", "Entity")
                        .WithMany("Sales")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SocialAccount", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.SocialAccountProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("SocialAccounts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SportTranslation", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Sport", "BaseEntity")
                        .WithMany("Translations")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Subscription", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("ExtremeInsiders.Entities.SubscriptionPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.HasOne("ExtremeInsiders.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SubscriptionPlanPrice", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.SubscriptionPlan", "Entity")
                        .WithMany("Prices")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.SubscriptionPlanTranslation", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.SubscriptionPlan", "BaseEntity")
                        .WithMany("Translations")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.User", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("ExtremeInsiders.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.VideoTranslation", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Video", "BaseEntity")
                        .WithMany("Translations")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("ExtremeInsiders.Models.EntitySaleablePrice", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExtremeInsiders.Models.EntitySaleable", "Entity")
                        .WithMany("Prices")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Playlist", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Sport", "Sport")
                        .WithMany("Playlists")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Movie", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Sport", "Sport")
                        .WithMany("Movies")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExtremeInsiders.Entities.Video", b =>
                {
                    b.HasOne("ExtremeInsiders.Entities.Playlist", "Playlist")
                        .WithMany("Videos")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
